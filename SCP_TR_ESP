------------ ------ {[ Services&Declarations ]} ------ ------------ 

local Services = setmetatable({}, {
    __index = function(self, Service)
        self[tostring(Service)] = game:GetService(tostring(Service));
        return self[tostring(Service)];
    end
})
local RunService = Services.RunService;
local Players    = Services.Players;
local Workspace  = Services.Workspace;
local Camera     = Workspace.CurrentCamera;
local Client     = Players.LocalPlayer;

local ViewportSize = Camera.ViewportSize;
local worldToView  = Camera.WorldToViewportPoint

local ESP = {
    Settings = {
        Enabled = false,
        Values = {
            Names = false,
            Distances = false,
            Healths = false,
            Boxes = false,
            BoxShift = CFrame.new(0, -1.5, 0),
            BoxSize = Vector3.new(4, 6, 0),
            Color = Color3.fromRGB(255, 255, 255),
        },
        Checks = {
            TeamCheck = false,
            TeamExceptions = {},
            PlayerExceptions = {},
        },
        Teams = {
            ["Anomali Aktörlüğü"] = "AK",
            ["Bilimsel Departman"] = "BD",
            ["Dış Saldırganlar"] = "DS",
            ["Etik Komitesi"] = "EK",
            ["Güvenlik Departmanı"] = "GD",
            ["Kaotik Kuvvetler Birliği"] = "KKB",
            ["Mobil Görev Güçleri"] = "MGG",
            ["Sınıf D Personeli"] = "SD",
            ["Tıbbi Departman"] = "TD",
            ["Vakıf Personeli"] = "VP",
            ["İdari Departman"] = "İD"
        },
    },
    VERSION = 1.04,
    Objects = setmetatable({}, {__mode="kv"})
};
ESP.__index = ESP;

local function ToRGB(Color)
    return Color3.fromRGB(Color.R * 255, Color.G * 255, Color.B * 255)
end

function ESP:GetTeamColor(Player: player)
    local Team = game:GetService("Teams"):FindFirstChild(tostring(Player.Team));
    if Team ~= nil then
        return Team.TeamColor.Color
    else
        return Color3.new(1, 1, 1)
    end
end

function ESP:GetDistance(Position: Vector3, isMetric: bool) -- Distance from cam pos
    isMetric = isMetric or true
    local Magnitude = (Camera.CFrame.Position - Position).Magnitude;
    if (isMetric) then
        return math.round(Magnitude * 0.28)
    else
        return math.round(Magnitude)
    end
end

function ESP:GetHealth(Model: Instance)
    local Humanoid = Model:FindFirstChildOfClass("Humanoid")
    if Humanoid then
        return Humanoid.Health
    end
    
    return 100
end

function ESP:GetPlayerFromCharacter(Model: Instance) -- Self explaining, only if character is linked to the client
    return Players:GetPlayerFromCharacter(Model)
end

function ESP:IsMate(Player: Player)
    return Client.Team == Player.Team
end

function ESP:GetBox(Obj)
    return self.Objects[Obj]
end

function ESP:GetTeamAbbreviation(Player: player)
    return self.Settings.Teams[Player.Team.Name]
end

function ESP:Toggle(bool)
    self.Settings.Enabled = bool
    if not bool then
        for i,v in pairs(self.Objects) do
            if v.Type == "Box" then
                for i,v in pairs(v.Components) do
                    v.Visible = false
                end
            end
        end
    end
end

local function Draw(Type, Properties)
    local New = Drawing.new(Type);
    for Property, Value in next, Properties do
        if (New[Property] ~= nil) then
            New[Property] = Value;
        else
            warn(("Invalid drawing property, name: %s"):format(tostring(i)))
        end
    end
    
    return New
end 

local function IsAlive(Plr: player)
    if (Plr.Character ~= nil) and (Plr.Character:IsDescendantOf(game)) and (Plr.Character:FindFirstChild("Humanoid")) and (Plr.Character.Humanoid.Health > 0) then
        return true
    else
        return false
    end
end 

----------------- -- [ ACTUAL Stuff ] -- -----------------

local Drawings     = {};
Drawings.__index   = Drawings;

function Drawings:Remove()
    ESP.Objects[self.Object] = nil
    for Obj, Val in pairs(self.Components) do
        Val.Visible = false
        Val:Remove()
        self.Components[Obj] = nil
    end
end

function Drawings:Update()
    if not (self.PrimaryPart) then
        return self:Remove()
    end
    
    local Color = (ToRGB(ESP:GetTeamColor(self.Player))) or (self.Color) or (ESP.Settings.Values.Color)

    local Check = false;
    if (self.Player) and ((not ESP.Settings.Checks.TeamCheck) or ESP.Settings.Checks.TeamCheck and ESP:IsMate(self.Player)) and (self.Enabled) and workspace:IsAncestorOf(self.PrimaryPart) then
        Check = true;
    end

    if not Check then
        for _, Comp in next, self.Components do
            Comp.Visible = false
        end
        return
    end

    ------- { CALCULATIONS
    local CF = self.PrimaryPart.CFrame
    local Size = self.Size
    local Locations = {
        TopLeft = CF * ESP.Settings.Values.BoxShift * CFrame.new(Size.X / 2, Size.Y / 2, 0),
        TopRight = CF * ESP.Settings.Values.BoxShift * CFrame.new(-Size.X / 2, Size.Y / 2, 0),
        BottomLeft = CF * ESP.Settings.Values.BoxShift * CFrame.new(Size.X / 2, -Size.Y / 2, 0),
        BottomRight = CF * ESP.Settings.Values.BoxShift * CFrame.new(-Size.X / 2, -Size.Y / 2, 0),
        TagPos = CF * ESP.Settings.Values.BoxShift * CFrame.new(0, Size.Y / 2, 0),
        Torso = CF * ESP.Settings.Values.BoxShift
    }

    if ESP.Settings.Values.Boxes then
        local TopLeft, Vis1 = worldToView(Camera, Locations.TopLeft.p)
        local TopRight, Vis2 = worldToView(Camera, Locations.TopRight.p)
        local BottomLeft, Vis3 = worldToView(Camera, Locations.BottomLeft.p)
        local BottomRight, Vis4 = worldToView(Camera, Locations.BottomRight.p)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA  = Vector2.new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB  = Vector2.new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC  = Vector2.new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD  = Vector2.new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color   = Color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        self.Components.Quad.Visible = false
    end

    if ESP.Settings.Values.Names then
        local TagPos, Vis5 = worldToView(Camera, Locations.TagPos.p)
        
        if Vis5 then
            self.Components.Name.Visible = true
            self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
            self.Components.Name.Text = string.format("[ %s ] %s", ESP:GetTeamAbbreviation(self.Player), self.Name)
            self.Components.Name.Color = Color
        else
            self.Components.Name.Visible = false
        end
    else
        self.Components.Name.Visible = false
    end

    if ESP.Settings.Values.Distances then
        local TagPos, Vis6 = worldToView(Camera, Locations.TagPos.p)
        
        if Vis6 then
            self.Components.Distance.Visible = true
            self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + 14)
            self.Components.Distance.Text = string.format("[ %s meters ]", tostring(ESP:GetDistance(CF.p)))
            self.Components.Distance.Color = Color
        else
            self.Components.Distance.Visible = false
        end
    else
        self.Components.Distance.Visible = false
    end
end

function ESP:Add(Obj, Options)
    if not Obj.Parent then
        return string.format('Object "%s" doesnt have a parent', Obj.Name)
    end

    local NewBox = setmetatable({
        Name = Options.Name or Obj.Name,
        Type = "Box",
        Color = Options.Color,
        Size = Options.Size or self.Settings.Values.BoxSize,
        Object = Obj,
        Player = Options.Player or ESP:GetPlayerFromCharacter(Obj),
        PrimaryPart = Options.PrimaryPart or (Obj.PrimaryPart or Obj:FindFirstChild("HumanoidRootPart") or Obj:FindFirstChildWhichIsA("BasePart")),
        Components = {},
        Enabled = Options.Enabled,
    }, Drawings)

    if self:GetBox(Obj) then
        self:GetBox(Obj):Remove()
    end

    NewBox.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = NewBox.Color,
        Transparency = 1,
        Filled = false,
        Visible = self.Enabled and self.Settings.Values.Boxes
    })
    NewBox.Components["Name"] = Draw("Text", {
		Text = NewBox.Name,
		Color = NewBox.Color,
		Center = true,
		Outline = true,
        Size = 13,
        Visible = self.Enabled and self.Settings.Values.Names
	})
	NewBox.Components["Distance"] = Draw("Text", {
		Color = NewBox.Color,
		Center = true,
		Outline = true,
        Size = 13,
        Visible = self.Enabled and self.Settings.Values.Names
	})

    self.Objects[Obj] = NewBox

    Obj.AncestryChanged:Connect(function(_, Parent)
        if Parent == nil then
            NewBox:Remove();
        end
    end)

    local Humanoid = Obj:FindFirstChildOfClass("Humanoid")
	if Humanoid then
        Humanoid.Died:Connect(function()
            NewBox:Remove();
		end)
    end

    return NewBox
end

local function CharAdded(Char)
    local Plr = ESP:GetPlayerFromCharacter(Char)
    if not Char:FindFirstChild("HumanoidRootPart") then
        local Child
        Child = Char.ChildAdded:Connect(function(Ch)
            if Ch.Name == "HumanoidRootPart" then
                Child:Disconnect()
                ESP:Add(Char, {
                    Name = Plr.Name,
                    Player = Plr,
                    PrimaryPart = Ch,
                    Enabled = true
                })
            end
        end)
    else
        ESP:Add(Char, {
            Name = Plr.Name,
            Player = Plr,
            PrimaryPart = Char.HumanoidRootPart,
            Enabled = true
        })
    end
end

local function PlayerAdded(Plr)
    Plr.CharacterAdded:Connect(CharAdded)
    if Plr.Character then
        coroutine.wrap(CharAdded)(Plr.Character)
    end
end

Players.PlayerAdded:Connect(PlayerAdded)

for _, Plr in pairs(Players:GetPlayers()) do
    if Plr ~= Client then
        PlayerAdded(Plr)
    end
end

RunService.RenderStepped:Connect(function()
    Camera = workspace.CurrentCamera
    for _, Obj in (ESP.Settings.Enabled and pairs or ipairs)(ESP.Objects) do
        if Obj.Update then
            local Success, Err = pcall(Obj.Update, Obj)
            if not (Success) then
                print(string.format("Render not successful, error: %s", Err))
            end
        end
    end
end)

return ESP;
