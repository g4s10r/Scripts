------------ ------ {[ Services&Declarations ]} ------ ------------ 

local Services = setmetatable({}, {
    __index = function(self, Service)
        self[tostring(Service)] = game:GetService(tostring(Service));
        return self[tostring(Service)];
    end
})
local Signal     = loadstring(game:HttpGet("https://raw.githubusercontent.com/g4s10r/Scripts/main/Signal"))();
local RunService = Services.RunService;
local Players    = Services.Players;
local Workspace  = Services.Workspace;
local Camera     = Workspace.CurrentCamera;
local Client     = Players.LocalPlayer;

local ViewportSize = Camera.ViewportSize;
local worldToView  = Camera.WorldToViewportPoint

local ESP = {
    Settings = {
        Enabled = false,
        Values = {
            Names = false,
            Distances = false,
            Healths = false,
            Boxes = false,
            BoxShift = CFrame.new(0, -1.5, 0),
            BoxSize = Vector3.new(4, 6, 0),
            Color = Color3.fromRGB(255, 255, 255),
        },
        Checks = {
            TeamCheck = false,
            UseTeamColors = false,
            TeamExceptions = false,
            Exceptions = {},
        },
    },
    VERSION = "Test 1.01",
    Objects = setmetatable({}, {__mode="kv"})
};
ESP.__index = ESP;

local function ToRGB(color)
    print("The color is", color)
    return Color3.fromRGB(color.r * 255, color.g * 255, color.b * 255)
end

function ESP:ToScreen(Position: Vector3) -- Vector3 to Screen pos (v2)
    local Position = typeof(Position) ~= "CFrame" and Position or Position.Position;
    local Vector, OnScreen = WorldToViewportPoint(Camera, Position);
    
    return Vector2.new(Vector.X, Vector.Y), OnScreen
end

function ESP:GetDistance(Position: Vector3, isMetric: bool) -- Distance from cam pos
    isMetric = isMetric or true
    local Magnitude = (Camera.CFrame.Position - Position).Magnitude;
    if (isMetric) then
        return math.round(Magnitude * 0.28)
    else
        return math.round(Magnitude)
    end
end

function ESP:GetTeamColor(Player: player)
    local Team = game:GetService("Teams"):FindFirstChild(tostring(Player.Team));
    if Team ~= nil and Team.TeamColor and Team.TeamColor.Color then
        return Team.TeamColor.Color
    else
        return Color3.new(1, 1, 1)
    end
end

function ESP:GetHealth(Model: Instance)
    local Humanoid = Model:FindFirstChildOfClass("Humanoid")
    if Humanoid then
        return Humanoid.Health
    end
    
    return 100
end

function ESP:GetPlayerFromCharacter(Model: Instance) -- Self explaining, only if character is linked to the client
    return Players:GetPlayerFromCharacter(Model)
end

function ESP:IsMate(Player: Player)
    return Client.Team == Player.Team
end

function ESP:GetBox(Obj)
    return self.Objects[Obj]
end

function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i,v in pairs(self.Objects) do
            if v.Type == "Box" then
                for i,v in pairs(v.Components) do
                    v.Visible = false
                end
            end
        end
    end
end

local function Draw(Type, Properties)
    local New = Drawing.new(Type);
    for Property, Value in next, Properties do
        if (New[Property] ~= nil) then
            New[Property] = Value;
        else
            warn(("Invalid drawing property, name: %s"):format(tostring(i)))
        end
    end
    
    return New
end 

----------------- -- [ ACTUAL Stuff ] -- -----------------

local Drawings     = {};
Drawings.__index   = Drawings;
local CameraSignal = Signal.new();
local PlayerSignal = Signal.new();

function Drawings:Remove()
    ESP.Objects[self.Object] = nil
    for i,v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function Drawings:Update()
    if not self.PrimaryPart then
        return self:Remove()
    end
    print("Self is", self)

    local Color = (ToRGB(ESP:GetTeamColor(self.Player) and ESP.Settings.Checks.UseTeamColors)) or (self.Color) or (ESP.Settings.Value.Color)

    print("Color is", Color)
    
    local Check = true;
    if (self.Player and not ESP.Checks.TeamCheck and ESP:IsMate(self.Player)) or not (self.Enabled) or not workspace:IsAncestorOf(self.PrimaryPart) then
        Check = false;
    end

    print("Check value is", Check)

    if not Check then
        for _, Comp in next, self.Components do
            Comp.Visible = false
        end
        return
    end

    --calculations--
    local CF = self.PrimaryPart.CFrame
    local Size = self.Size
    local Locations = {
        TopLeft = CF * ESP.Settings.Values.BoxShift * CFrame.new(Size.X / 2, Size.Y / 2, 0),
        TopRight = CF * ESP.Settings.Values.BoxShift * CFrame.new(-Size.X / 2, Size.Y / 2, 0),
        BottomLeft = CF * ESP.Settings.Values.BoxShift * CFrame.new(Size.X / 2, -Size.Y / 2, 0),
        BottomRight = CF * ESP.Settings.Values.BoxShift * CFrame.new(-Size.X / 2, -Size.Y / 2, 0),
        TagPos = CF * ESP.Settings.Values.BoxShift * CFrame.new(0, Size.Y / 2, 0),
        Torso = CF * ESP.Settings.Values.BoxShift
    }

    if ESP.Settings.Values.Boxes then
        local TopLeft, Vis1 = worldToView(Camera, Locations.TopLeft.p)
        local TopRight, Vis2 = worldToView(Camera, Locations.TopRight.p)
        local BottomLeft, Vis3 = worldToView(Camera, Locations.BottomLeft.p)
        local BottomRight, Vis4 = worldToView(Camera, Locations.BottomRight.p)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA  = Vector2.new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB  = Vector2.new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC  = Vector2.new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD  = Vector2.new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color   = Color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        self.Components.Quad.Visible = false
    end

    if ESP.Settings.Values.Names then
        local TagPos, Vis5 = worldToView(Camera, Locations.TagPos.p)
        
        if Vis5 then
            self.Components.Name.Visible = true
            self.Components.Name.Position = Vector2.new(TagPos.X, TagPos.Y)
            self.Components.Name.Text = self.Name
            self.Components.Name.Color = Color
            
            self.Components.Distance.Visible = true
            self.Components.Distance.Position = Vector2.new(TagPos.X, TagPos.Y + 14)
            self.Components.Distance.Text = string.format("%s m away", tostring(ESP:GetDistance(CF.p)))
            self.Components.Distance.Color = Color
        else
            self.Components.Name.Visible = false
            self.Components.Distance.Visible = false
        end
    else
        self.Components.Name.Visible = false
        self.Components.Distance.Visible = false
    end
end

function ESP:Add(Obj, Options)
    if not Obj.Parent then
        return string.format('Object "%s" doesnt have a parent', Obj.Name)
    end

    local NewBox = setmetatable({
        Name = Options.Name or Obj.Name,
        Type = "Box",
        Color = Options.Color,
        Size = Options.Size or self.Settings.Values.BoxSize,
        Object = Obj,
        Player = Options.Player or ESP:GetPlayerFromCharacter(Obj),
        PrimaryPart = Options.PrimaryPart or Obj.ClassName == "Model" and (Obj.PrimaryPart or Obj:FindFirstChild("HumanoidRootPart") or Obj:FindFirstChildWhichIsA("BasePart")) or Obj:IsA("BasePart") and Obj,
        Components = {},
        Enabled = Options.Enabled,
    }, Drawings)

    if self:GetBox(Obj) then
        self:GetBox(Obj):Remove()
    end

    NewBox.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = NewBox.Color,
        Transparency = 1,
        Filled = false,
        Visible = self.Enabled and self.Settings.Values.Boxes
    })
    NewBox.Components["Name"] = Draw("Text", {
		Text = NewBox.Name,
		Color = NewBox.Color,
		Center = true,
		Outline = true,
        Size = 16,
        Visible = self.Enabled and self.Settings.Values.Names
	})
	NewBox.Components["Distance"] = Draw("Text", {
		Color = NewBox.Color,
		Center = true,
		Outline = true,
        Size = 16,
        Visible = self.Enabled and self.Settings.Values.Names
	})

    self.Objects[Obj] = NewBox
    
    Obj.AncestryChanged:Connect(function(_, Parent)
        if Parent == nil then
            PlayerSignal:Fire(Obj)
        end
    end)

    local PlayerHumanoid = Obj:FindFirstChildOfClass("Humanoid")
	if PlayerHumanoid then
        PlayerHumanoid.Died:Connect(function()
            PlayerSignal:Fire(Obj)
		end)
    end

    return NewBox
end

PlayerSignal:Connect(function(Character)
	local Plr = ESP:GetPlayerFromCharacter(Character);
    print("Player signal fired! Player:", Plr.Name)
end)

CameraSignal:Connect(function()
	-- print("Camera changed!")
end)

Camera:GetPropertyChangedSignal("CFrame"):Connect(function()
    CameraSignal:Fire();
end)

RunService:BindToRenderStep("CurCamUpdate", 5, function()
    Camera = workspace.CurrentCamera;
end)

return ESP;
